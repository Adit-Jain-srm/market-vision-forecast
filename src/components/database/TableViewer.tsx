
import React, { useState } from 'react';
import { Table, TableHeader, TableBody, TableHead, TableRow, TableCell } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Database, Search, Info, IndianRupee } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { generateMockStockData, stockSymbols } from '@/utils/mockData';

// Sample mock data for each table
const mockTables = {
  stock: [
    { symbol: 'AAPL', name: 'Apple Inc.', sector: 'Technology', industry: 'Consumer Electronics', ceo: 'Tim Cook', founded_year: 1976 },
    { symbol: 'MSFT', name: 'Microsoft Corporation', sector: 'Technology', industry: 'Software', ceo: 'Satya Nadella', founded_year: 1975 },
    { symbol: 'GOOGL', name: 'Alphabet Inc.', sector: 'Technology', industry: 'Internet Services', ceo: 'Sundar Pichai', founded_year: 1998 },
    { symbol: 'AMZN', name: 'Amazon.com Inc.', sector: 'Consumer Cyclical', industry: 'Internet Retail', ceo: 'Andy Jassy', founded_year: 1994 },
    { symbol: 'TSLA', name: 'Tesla Inc.', sector: 'Automotive', industry: 'Auto Manufacturers', ceo: 'Elon Musk', founded_year: 2003 },
    { symbol: 'RELIANCE', name: 'Reliance Industries Ltd.', sector: 'Energy', industry: 'Oil & Gas', ceo: 'Mukesh Ambani', founded_year: 1966 },
    { symbol: 'TCS', name: 'Tata Consultancy Services Ltd.', sector: 'Technology', industry: 'IT Services', ceo: 'K Krithivasan', founded_year: 1968 },
    { symbol: 'HDFCBANK', name: 'HDFC Bank Ltd.', sector: 'Financial Services', industry: 'Banking', ceo: 'Sashidhar Jagdishan', founded_year: 1994 },
    { symbol: 'INFY', name: 'Infosys Ltd.', sector: 'Technology', industry: 'IT Services', ceo: 'Salil Parekh', founded_year: 1981 },
    { symbol: 'BHARTIARTL', name: 'Bharti Airtel Ltd.', sector: 'Communication', industry: 'Telecom', ceo: 'Gopal Vittal', founded_year: 1995 },
  ],
  price_history: (symbol: string) => {
    return generateMockStockData(30, symbol).map((item, index) => ({
      id: index + 1,
      stock_symbol: symbol,
      date: item.date,
      open: item.open,
      high: item.high,
      low: item.low,
      close: item.close,
      volume: item.volume
    }));
  },
  model: [
    { id: 1, name: 'Linear Regression', algorithm: 'LR', created_at: '2023-06-01T10:00:00Z', parameters: '{"alpha": 0.1}', accuracy: 78.5 },
    { id: 2, name: 'Random Forest', algorithm: 'RF', created_at: '2023-06-15T14:30:00Z', parameters: '{"trees": 100}', accuracy: 85.2 },
    { id: 3, name: 'LSTM Network', algorithm: 'LSTM', created_at: '2023-07-02T09:15:00Z', parameters: '{"layers": 3}', accuracy: 89.6 },
    { id: 4, name: 'ARIMA', algorithm: 'ARIMA', created_at: '2023-07-20T11:45:00Z', parameters: '{"p":2,"d":1,"q":2}', accuracy: 76.8 },
  ],
  prediction: (symbol: string) => {
    const baseData = generateMockStockData(10, symbol);
    return baseData.map((item, index) => ({
      id: index + 1,
      stock_symbol: symbol,
      date: item.date,
      predicted_price: (item.close * (1 + (Math.random() * 0.1 - 0.05))).toFixed(2),
      model_id: Math.floor(Math.random() * 4) + 1,
      accuracy: (70 + Math.random() * 20).toFixed(2)
    }));
  }
};

// Function to determine if a stock symbol is from an Indian company
const isIndianStock = (symbol: string): boolean => {
  const indianSymbols = ['RELIANCE', 'TCS', 'HDFCBANK', 'INFY', 'BHARTIARTL'];
  return indianSymbols.includes(symbol);
};

// Format currency based on stock origin
const formatCurrency = (value: number, symbol: string): string => {
  if (isIndianStock(symbol)) {
    return `â‚¹${value.toFixed(2)}`;
  }
  return `$${value.toFixed(2)}`;
};

interface TableViewerProps {
  symbol: string;
}

const TableViewer = ({ symbol }: TableViewerProps) => {
  const [selectedTable, setSelectedTable] = useState<string>('stock');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [tableColumns, setTableColumns] = useState<string[]>([]);
  const [tableData, setTableData] = useState<any[]>([]);
  
  // Table descriptions for info tooltip
  const tableDescriptions = {
    stock: 'Contains basic information about stock symbols including company details',
    price_history: 'Historical price data for each stock including OHLC and volume',
    model: 'Prediction models with their algorithms and performance metrics',
    prediction: 'Price predictions generated by models for specific stocks and dates'
  };

  // Table schema definitions matching the CREATE TABLE statements
  const tableSchemas = {
    stock: [
      { column: 'symbol', type: 'VARCHAR(10)', constraints: 'PRIMARY KEY', description: 'Stock ticker symbol' },
      { column: 'name', type: 'VARCHAR(255)', constraints: 'NOT NULL', description: 'Company name' },
      { column: 'sector', type: 'VARCHAR(100)', constraints: '', description: 'Business sector' },
      { column: 'industry', type: 'VARCHAR(100)', constraints: '', description: 'Specific industry' },
      { column: 'ceo', type: 'VARCHAR(100)', constraints: '', description: 'Chief Executive Officer' },
      { column: 'founded_year', type: 'INT', constraints: '', description: 'Year the company was founded' }
    ],
    price_history: [
      { column: 'id', type: 'SERIAL', constraints: 'PRIMARY KEY', description: 'Unique identifier' },
      { column: 'stock_symbol', type: 'VARCHAR(10)', constraints: 'REFERENCES Stock(symbol)', description: 'Foreign key to stock table' },
      { column: 'date', type: 'DATE', constraints: 'NOT NULL', description: 'Trading date' },
      { column: 'open', type: 'DECIMAL(10,2)', constraints: 'NOT NULL', description: 'Opening price' },
      { column: 'high', type: 'DECIMAL(10,2)', constraints: 'NOT NULL', description: 'Highest price' },
      { column: 'low', type: 'DECIMAL(10,2)', constraints: 'NOT NULL', description: 'Lowest price' },
      { column: 'close', type: 'DECIMAL(10,2)', constraints: 'NOT NULL', description: 'Closing price' },
      { column: 'volume', type: 'BIGINT', constraints: 'NOT NULL', description: 'Trading volume' }
    ],
    model: [
      { column: 'id', type: 'SERIAL', constraints: 'PRIMARY KEY', description: 'Unique identifier' },
      { column: 'name', type: 'VARCHAR(100)', constraints: 'NOT NULL', description: 'Model name' },
      { column: 'algorithm', type: 'VARCHAR(50)', constraints: 'NOT NULL', description: 'Algorithm type' },
      { column: 'created_at', type: 'TIMESTAMP', constraints: 'DEFAULT CURRENT_TIMESTAMP', description: 'Creation timestamp' },
      { column: 'parameters', type: 'JSONB', constraints: '', description: 'Model parameters as JSON' },
      { column: 'accuracy', type: 'DECIMAL(5,2)', constraints: '', description: 'Model accuracy percentage' }
    ],
    prediction: [
      { column: 'id', type: 'SERIAL', constraints: 'PRIMARY KEY', description: 'Unique identifier' },
      { column: 'stock_symbol', type: 'VARCHAR(10)', constraints: 'REFERENCES Stock(symbol)', description: 'Foreign key to stock table' },
      { column: 'date', type: 'DATE', constraints: 'NOT NULL', description: 'Prediction date' },
      { column: 'predicted_price', type: 'DECIMAL(10,2)', constraints: 'NOT NULL', description: 'Predicted price value' },
      { column: 'model_id', type: 'INT', constraints: 'REFERENCES Model(id)', description: 'Foreign key to model table' },
      { column: 'accuracy', type: 'DECIMAL(5,2)', constraints: '', description: 'Prediction accuracy' }
    ]
  };

  // Function to load data for the selected table
  React.useEffect(() => {
    let data: any[] = [];
    
    if (selectedTable === 'stock') {
      data = mockTables.stock;
    } else if (selectedTable === 'price_history') {
      data = mockTables.price_history(symbol);
    } else if (selectedTable === 'model') {
      data = mockTables.model;
    } else if (selectedTable === 'prediction') {
      data = mockTables.prediction(symbol);
    }
    
    if (data.length > 0) {
      setTableColumns(Object.keys(data[0]));
      setTableData(data);
    } else {
      setTableColumns([]);
      setTableData([]);
    }
  }, [selectedTable, symbol]);

  // Filter data based on search term
  const filteredData = tableData.filter(row => {
    if (!searchTerm) return true;
    return Object.values(row).some(
      value => String(value).toLowerCase().includes(searchTerm.toLowerCase())
    );
  });

  // Format cell values based on content type
  const formatCellValue = (column: string, value: any, row: any): string => {
    if (['open', 'high', 'low', 'close', 'predicted_price'].includes(column) && row.stock_symbol) {
      return formatCurrency(parseFloat(value), row.stock_symbol);
    }
    return String(value);
  };

  return (
    <div className="bg-app-dark rounded-md border border-muted p-4 animate-fade-in">
      <div className="flex flex-col space-y-4">
        <div className="flex flex-col sm:flex-row justify-between sm:items-center space-y-4 sm:space-y-0">
          <div className="flex items-center space-x-2">
            <Database className="h-5 w-5 text-app-blue" />
            <h2 className="text-xl font-semibold">Database Tables</h2>
          </div>
          
          <div className="flex space-x-2">
            <Select value={selectedTable} onValueChange={setSelectedTable}>
              <SelectTrigger className="w-[180px] bg-app-darker border-muted">
                <SelectValue placeholder="Select table" />
              </SelectTrigger>
              <SelectContent className="bg-app-dark border-muted">
                <SelectItem value="stock">Stock</SelectItem>
                <SelectItem value="price_history">PriceHistory</SelectItem>
                <SelectItem value="model">Model</SelectItem>
                <SelectItem value="prediction">Prediction</SelectItem>
              </SelectContent>
            </Select>
            
            <div className="relative">
              <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-app-gray" />
              <Input
                placeholder="Search table..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-8 w-[180px] bg-app-darker border-muted"
              />
            </div>
          </div>
        </div>
        
        <Card className="bg-app-darker border-muted">
          <CardHeader className="pb-2">
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="flex items-center space-x-2">
                  <span>{selectedTable === 'price_history' ? 'PriceHistory' : 
                         selectedTable === 'stock' ? 'Stock' :
                         selectedTable === 'model' ? 'Model' : 'Prediction'}</span>
                </CardTitle>
                <CardDescription className="text-app-gray">
                  {(tableDescriptions as any)[selectedTable]}
                </CardDescription>
              </div>
              <div className="flex items-center gap-2">
                {isIndianStock(symbol) && selectedTable !== 'model' && (
                  <Button variant="outline" size="sm" className="flex items-center space-x-1">
                    <IndianRupee className="h-4 w-4" />
                    <span>Indian Stock</span>
                  </Button>
                )}
                <Button variant="outline" size="sm" className="flex items-center space-x-1">
                  <Info className="h-4 w-4" />
                  <span>Schema</span>
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="rounded-md border border-muted overflow-hidden">
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow className="bg-muted/50">
                      {tableColumns.map((column) => (
                        <TableHead key={column} className="whitespace-nowrap">
                          {column}
                        </TableHead>
                      ))}
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredData.length > 0 ? (
                      filteredData.map((row, rowIndex) => (
                        <TableRow key={rowIndex}>
                          {tableColumns.map((column) => (
                            <TableCell key={`${rowIndex}-${column}`} className="whitespace-nowrap">
                              {formatCellValue(column, row[column], row)}
                            </TableCell>
                          ))}
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell
                          colSpan={tableColumns.length}
                          className="h-24 text-center text-app-gray"
                        >
                          No results found
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </div>
            
            <div className="mt-4 p-3 bg-muted/30 rounded-md">
              <h3 className="text-sm font-medium mb-2">Table Schema</h3>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow className="bg-muted/50">
                      <TableHead>Column</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Constraints</TableHead>
                      <TableHead>Description</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {(tableSchemas as any)[selectedTable].map((schema: any, index: number) => (
                      <TableRow key={index}>
                        <TableCell className="font-medium">{schema.column}</TableCell>
                        <TableCell>{schema.type}</TableCell>
                        <TableCell>{schema.constraints}</TableCell>
                        <TableCell>{schema.description}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default TableViewer;
